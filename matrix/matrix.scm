; операции на матрицы 2х2: умножение, сложение, транспонирование, 
; получить элемента/строки/столбца, умножение на число, умножение на вектор.


(define (matrix m)
    (let ((M m))
        (define (print)
            M
        )
        (define (row i) 
            (if (= i 1) (car M) (car (cdr M)))
        )
        (define (column i)

            (if (= i 1)
                (list (car (row 1)) (car (row 2)))
                (list (car (cdr (row 1))) (car (cdr (row 2))))
            )
        )
        (define (element i j)
            (if (= j 1)
                (car (row i))
                (car (cdr (row i)))
            )
        )
        (define (multM N)
            (list
                (list
                    (apply + (map * (row 1) (N 'column 1)))
                    (apply + (map * (row 1) (N 'column 2)))
                )
                (list
                    (apply + (map * (row 2) (N 'column 1)))
                    (apply + (map * (row 2) (N 'column 2)))
                )
            )
        )
        (define (sumM N)
            (list
                (map + (row 1) (N 'row 1))
                (map + (row 2) (N 'row 2))
            )
        )
        (define (multV n)
            (list
                (apply + (map * (row 1) n))
                (apply + (map * (row 2) n))
            )
        )
        (define (multN n)
            (list
                (map * (row 1) (list n n))
                (map * (row 2) (list n n))
            )
        )
        (define (transpon)
            (list
                (list (element 1 1) (element 2 1))
                (list (element 1 2) (element 2 2))
            )
        )
        (lambda args
            (apply 
                (case (car args)
                    ((print) print)
                    ((row) row)
                    ((column) column)
                    ((element) element)
                    ((multM) multM)
                    ((multV) multV)
                    ((multN) multN)
                    ((sumM) sumM)
                    ((transpon) transpon)
                    (else (begin (display "Invalid method\n") (exit 1)))
                )
                (cdr args)
            )
        )
    )
)

(define m (matrix (list (list 1 2) (list 3 4))))
(define n (matrix (list (list 1 1) (list 1 1))))

(display "row 1: ") (display (m 'row 1))           (newline)
(display "row 2: ") (display (m 'row 2))           (newline)
(display "col 1: ") (display (m 'column 1))        (newline)
(display "col 2: ") (display (m 'column 2))        (newline)
(display "row 1 col 1: ") (display (m 'element 1 1))        (newline)
(display "row 1 col 2: ") (display (m 'element 1 2))        (newline)
(display "row 2 col 1: ") (display (m 'element 2 1))        (newline)
(display "row 2 col 2: ") (display (m 'element 2 2))        (newline)
(display (m 'print))(display "*")(display (n 'print) )(display "= ") (display (m 'multM n))                 (newline)
(display (m 'print))(display "*")(display (list 2 3) )(display "= ") (display (m 'multV (list 2 3)))        (newline)
(display (m 'print))(display "*")(display 3 )(display "= ") (display (m 'multN 3))                          (newline)
(display (m 'print))(display "T= ") (display (m 'transpon))                                                 (newline)